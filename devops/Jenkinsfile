def projectProperties = [
        [$class: 'BuildDiscarderProperty',
            strategy: [$class: 'LogRotator', //
            numToKeepStr: '10',
            daysToKeepStr: 'daysToKeepStr',
            artifactDaysToKeepStr: '20',
            artifactNumToKeepStr: '10']],
        parameters([
            string(name: 'PARAMETRO_STRING', description: 'Exemplo de Parametro String', defaultValue: 'develop'),
            booleanParam(name: 'PARAMETRO_BOOLEANO', description: 'Exemplo de Parametro Booleano', defaultValue: true)
    ])
]

//Variaveis
env.BRANCH = "master"
env.CHROME_BIN='/usr/bin/chromium'

node('nodejs') {
    try {
        timestamps {
            ansiColor('gnome-terminal') {
                stage('Checkout do Projeto') {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "${BRANCH}"]],
                        doGenerateSubmoduleConfigurations: scm.doGenerateSubmoduleConfigurations,
                        extensions: scm.extensions,
                        userRemoteConfigs: scm.userRemoteConfigs
                    ])
                }

                stage('Compilar') {
                   sh 'export CHROME_BIN=/usr/bin/chromium'
                   sh 'echo "CHROME BIN VAR = $CHROME_BIN" '
                   sh 'npm i' 
                }

                stage('Run Tests') {
                    runUnitTestsPublishReports()
                }

                stage('Build Angular') {
                    sh 'npm run build'
                }

                stage ('Sonar') {
                    sh 'echo "Executando Teste Sonar"'
                }

                stage('promotion to Production env') {
                    timeout(time:5, unit:'DAYS') {
                        input 'promotion to Production env?'
                    }
                }

                stage('Deploy') {
                   sh 'echo "Deploy Projeto"'     
                }
            }
        }
 } catch (e) {
        currentBuild.result = 'FAILURE'
        echo "Fail: ${e}"
        throw e
        } finally {
        stage('Clean workspace') {
            deleteDir()
        }
    }
}

def runUnitTestsPublishReports() { 
    sh 'npm run test'
    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: "coverage", reportFiles: "index.html", reportName: "Test Coverage Results"])
    junit allowEmptyResults: false, testResults: '**/report/junit-report.xml'
}
