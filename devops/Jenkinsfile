def projectProperties = [
        [$class: 'BuildDiscarderProperty',
            strategy: [$class: 'LogRotator', //
            numToKeepStr: '10',
            daysToKeepStr: 'daysToKeepStr',
            artifactDaysToKeepStr: '20',
            artifactNumToKeepStr: '10']],
        parameters([
            string(name: 'PARAMETRO_STRING', description: 'Exemplo de Parametro String', defaultValue: 'develop'),
            booleanParam(name: 'PARAMETRO_BOOLEANO', description: 'Exemplo de Parametro Booleano', defaultValue: true)
    ])
]

//Variaveis
node('nodejs') {

    env.BRANCH = "master"
    env.CHROME_BIN='/usr/bin/chromium-browser'
    env.CHROME_PATH='/usr/lib/chromium/'

    try {
        timestamps {
            stage('Checkout do Projeto') {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "${BRANCH}"]],
                    doGenerateSubmoduleConfigurations: scm.doGenerateSubmoduleConfigurations,
                    extensions: scm.extensions,
                    userRemoteConfigs: scm.userRemoteConfigs
                ])
            }

            stage('Compilar') {
                sh 'npm i' 
            }

            stage('Run Tests') {
                runUnitTestsPublishReports()
            }

            stage('Build Angular') {
                sh 'npm run build'
            }
            stage('Analyze static code') {
                env.SCANNER_HOME = tool 'SonarScanner'

                withSonarQubeEnv(credentialsId: "sonar-local-token") {
                    sonarQubeAnalysis()
                }
                sleep time: 1, unit: 'MINUTES'
                validateSonarQualityGate()
            }
            

            stage("Check Quality Gate") {
                timeout(time: 5, unit: 'MINUTES') {
                    def qualityGate = waitForQualityGate()
                    if (qualityGate.status != 'OK') {

                        googlechatnotification message: "[ ${APPLICATION_NAME}:${RELEASE_VERSION} ] - Falha ao executar o build para a branch ${BRANCH}. O código não está de acordo com as regras do Sonar: ${qualityGate.status}", url: "${GOOGLE_NOTIFICATION_SWORD_QA}"
                        error "O código não está de acordo com as regras do Sonar: ${qualityGate.status}"

                    }
                }
            }
            

            stage('promotion to Production env') {
                timeout(time:5, unit:'DAYS') {
                    input 'promotion to Production env?'
                }
            }

            stage('Deploy') {
                sh 'echo "Deploy Projeto"'     
            }
        }
 } catch (e) {
        currentBuild.result = 'FAILURE'
        echo "Fail: ${e}"
        throw e
        } finally {
        stage('Clean workspace') {
            deleteDir()
        }
    }
}

def runUnitTestsPublishReports() { 
    sh 'npm run test:coverage'
    junit 'junit.xml'
    step([$class: 'CoberturaPublisher', coberturaReportFile: 'coverage/cobertura-coverage.xml'])
    publishHTML (target: [
            reportDir: 'coverage/',
            reportFiles: 'index.html',
            reportName: "TypeScript HTML Report"
    ])
}

def sonarQubeAnalysis() {
        println("| SONARQUBE ANALYIS|")
        sh """
        ${scannerHome}/bin/sonar-scanner \
            -Dsonar.projectKey=teste \
            -Dsonar.projectName=tour-of-heroes \
            -DprojectVersion=0.1.1 \
            -Dsonar.language=ts \
            -Dsonar.projectBaseDir=./ \
            -Dsonar.sources=src \
            -Dsonar.exclusions=**/node_modules/**,**/*.spec.ts,src/app/app.module.ts \
            -Dsonar.tests=src \
            -Dsonar.test.inclusions=**/*.spec.ts \
            -Dsonar.ts.tslintconfigpath=tslint.json \
            -Dsonar.ts.lcov.reportpath=coverage/lcov.info \
            -Dsonar.sourceEncoding=UTF-8 \
            -Dsonar.scm.provider=git \
            -Dsonar.scm.enabled=true
        """
    }

    def validateSonarQualityGate() {
        println("| VALIDATE SONAR QUALITYGATE |")
        def qualityGate = waitForQualityGate()
        if (qualityGate.status != 'OK') {
            error "O código não está de acordo com as regras do Sonar: ${qualityGate.status}"
            // notifyBuild("${APPLICATION_NAME}:${NEW_VERSION} ] - Falha ao executar o build para a branch ${BRANCH}. O código não está de acordo com as regras do Sonar: ${qualityGate.status}",
            // false)
        }
    }